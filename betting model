import streamlit as st
import pandas as pd
import datetime

def calculate_ev(odds, estimated_probability):
    """ Bereken de Expected Value (EV) en check of de bet voldoet aan de 54% regel. """
    implied_probability = 1 / odds  # Implied probability van de odds
    ev = (estimated_probability * odds) - (1 - estimated_probability)  # Expected Value berekening
    profitable = estimated_probability > implied_probability and estimated_probability >= 0.54  # Minimaal 54% kans

    return implied_probability, ev, profitable

def main():
    st.title("‚öΩ Automatisch Betting Model - Expected Value Calculator")
    
    st.write("Vul de odds en geschatte kans in en het model bepaalt of de bet winstgevend is.")
    
    num_bets = 10  # Aantal weddenschappen per dag
    bets = []
    history_file = "betting_history.csv"
    
    for i in range(num_bets):
        st.subheader(f"Bet {i+1}")
        bet_name = st.text_input(f"Naam van de bet {i+1}", f"Over 2.5 Goals {i+1}")
        odds = st.number_input(f"Odds {i+1} (bijv. 1.68)", min_value=1.01, step=0.01, value=1.68, key=f"odds_{i}")
        estimated_probability = st.slider(f"Geschatte kans {i+1} (%)", 0, 100, 58, key=f"prob_{i}") / 100
        
        implied_prob, ev, profitable = calculate_ev(odds, estimated_probability)
        bets.append({
            "Datum": datetime.date.today(),
            "Bet": bet_name,
            "Odds": odds,
            "Geschatte Kans": estimated_probability,
            "Implied Probability": implied_prob,
            "Expected Value": ev,
            "Winstgevend Bet": "Ja" if profitable else "Nee"
        })
    
    if st.button("Bereken alle bets"):
        results_df = pd.DataFrame(bets)
        st.write("### Resultaten:")
        st.dataframe(results_df)
        
        profitable_bets = results_df[results_df["Winstgevend Bet"] == "Ja"]
        if not profitable_bets.empty:
            st.success(f"‚úÖ {len(profitable_bets)} van de {num_bets} bets zijn winstgevend volgens jouw model!")
        else:
            st.warning("‚ùå Geen enkele bet is winstgevend volgens jouw model.")
        
        # Opslaan in geschiedenis
        try:
            history_df = pd.read_csv(history_file)
        except FileNotFoundError:
            history_df = pd.DataFrame(columns=["Datum", "Bet", "Odds", "Geschatte Kans", "Implied Probability", "Expected Value", "Winstgevend Bet"])
        
        history_df = pd.concat([history_df, results_df], ignore_index=True)
        history_df.to_csv(history_file, index=False)
        st.write("üìú Geschiedenis bijgewerkt!")
    
    if st.button("Bekijk Betting Geschiedenis"):
        try:
            history_df = pd.read_csv(history_file)
            st.write("### Betting Geschiedenis:")
            st.dataframe(history_df)
        except FileNotFoundError:
            st.warning("üö´ Geen geschiedenis gevonden.")

if __name__ == "__main__":
    main()
